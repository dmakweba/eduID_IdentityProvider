<?xml version="1.0" encoding="UTF-8"?>
<MetadataProvider id="ShibbolethMetadata" xsi:type="ChainingMetadataProvider"
    xmlns="urn:mace:shibboleth:2.0:metadata"
    xmlns:resource="urn:mace:shibboleth:2.0:resource"
    xmlns:security="urn:mace:shibboleth:2.0:security"
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="                        urn:mace:shibboleth:2.0:metadata http://shibboleth.net/schema/idp/shibboleth-metadata.xsd
    urn:mace:shibboleth:2.0:resource http://shibboleth.net/schema/idp/shibboleth-resource.xsd
    urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd
    urn:oasis:names:tc:SAML:2.0:metadata http://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd">

    <!-- ==================================== -->
    <!--          Metadata Configuration      -->
    <!--                                      -->
    <!--  https://wiki.shibboleth.net/confluence/display/IDP30/MetadataConfiguration -->
    <!-- ==================================== -->

    <!--
    Example HTTP metadata provider.  
    Use this if you want to download the metadata
    from a remote source.

    You *MUST* provide the SignatureValidationFilter in order to function securely.
    Get the public key from the party publishing the metadata, and validate it
    with them via some out of band mechanism.

    The EntityRoleWhiteList saves memory by only loading metadata from SAML roles
    that the IdP needs to interoperate with.
    -->
  {% for federation in federations %}

    <MetadataProvider id="{{ federation.name }}Metadata"
                      xsi:type="FileBackedHTTPMetadataProvider"
                      metadataURL="{{ federation.metadata_url }}"
                      backingFile="{{ idp_home }}/metadata/{{ federation.metadata_file }}"
                      disregardTLSCertificate="{{ federation.disregard_tsl_certificate }}" >
       <MetadataFilter  xsi:type="SignatureValidation"
            requireSignedRoot="true"
            certificateFile="{{ idp_home }}/credentials/fedsigner.crt.pem" />
        <MetadataFilter xsi:type="RequiredValidUntil" maxValidityInterval="P14D"/>

        <MetadataFilter xsi:type="EntityRoleWhiteList">
            <RetainedRole>md:SPSSODescriptor</RetainedRole>
        </MetadataFilter>
    </MetadataProvider>

  {% endfor %}

</MetadataProvider>